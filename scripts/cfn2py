#!/usr/bin/env python

import argparse
import json
import keyword
import re
import sys
import types

from troposphere import PythonCall
from troposphere.template_generator import TemplateGenerator

valid_python_id = re.compile(r'^[a-zA-Z_][a-zA-Z0-9_]*$')


class PythonPrinter(object):
    indent_per_level = 4

    def __init__(self, indent=4, stream=None):
        self._indent_per_level = indent
        self._stream = stream or sys.stdout

    def pprint(self, obj, level=0):
        indent0 = level * self._indent_per_level
        indent1 = (level + 1) * self._indent_per_level
        level += 1
        write = self._stream.write

        if isinstance(obj, list):
            if len(obj) == 0:
                write('[]')
            else:
                write('[')
                for v in obj:
                    write('\n' + ' '*indent1)
                    self.pprint(v, level)
                    write(',')
                write('\n' + ' '*indent0 + ']')
            return

        if isinstance(obj, dict):
            if len(obj) == 0:
                write('{}')
            else:
                write('{')
                for k, v in sorted(obj.items()):
                    write('\n' + ' '*indent1 + _repr(k) + ': ')
                    self.pprint(v, level)
                    write(',')
                write('\n' + ' '*indent0 + '}')
            return

        if getattr(type(obj), "to_python_call", None):
            obj = obj.to_python_call()

        if isinstance(obj, PythonCall):
            if isinstance(obj.target, basestring):
                target = str(obj.target)
            else:
                target = _class_name(obj.target)

            use_named_params = all([
                valid_python_id.match(k) and not keyword.iskeyword(k) for k in obj.kwargs.keys()
            ])

            write(target + '(')
            indent_end = ''

            # Regular arguments
            if len(obj.args) == 0:
                pass
            elif len(obj.args) == 1 and (len(obj.kwargs) == 0 or isinstance(obj.args[0], basestring)):
                # special case for a single argument, works well for resource titles etc.
                self.pprint(obj.args[0], level - 1)
                if len(obj.kwargs) > 0:
                    write(',')
            else:
                for v in obj.args:
                    write('\n' + ' '*indent1)
                    self.pprint(v, level)
                    write(',')
                indent_end = '\n' + ' '*indent0

            # Keyword arguments
            if len(obj.kwargs) == 0:
                pass
            else:
                if use_named_params:
                    # preferred format for keyword arguments
                    for k, v in sorted(obj.kwargs.items()):
                        write('\n' + ' '*indent1 + k + '=')
                        self.pprint(v, level)
                        write(',')
                else:
                    # one of the argument names isn't a valid python identifier, format as regular dict literal
                    write('**')
                    self.pprint(obj.kwargs, level - (0 if len(obj.args) > 1 else 1))
                indent_end = '\n' + ' '*indent0

            write(indent_end + ')')
            return

        write(_repr(obj))


def _repr(v):
    if type(v) == types.UnicodeType:
        v = str(v)
    return repr(v)


def _class_name(obj):
    """
    Given a Troposphere object, returns the python name of the object class minus the
    'troposphere.' prefix, eg. 's3.Bucket'.
    """
    full_name = obj.__module__ + '.' + obj.__class__.__name__
    return full_name.replace('troposphere.', '')


def pprint(template, stream=None):
    if stream is None:
        stream = sys.stdout
    pprint = PythonPrinter(stream=stream).pprint
    write = stream.write

    # Header
    write('from troposphere import *\n')
    write('from troposphere import %s\n' % (
        ', '.join(sorted(set(
            ['cloudformation', 'policies'] +
            [r.__module__.replace('troposphere.', '') for r in template.resources.values()]))),
    ))
    write('\n')

    # Construct the Template
    write('t = Template()\n')
    if template.version:
        pprint(PythonCall('t.add_version', template.version))
        write('\n\n')
    if template.description:
        pprint(PythonCall('t.add_description', template.description))
        write('\n\n')
    if template.metadata:
        pprint(PythonCall('t.add_metadata', template.metadata))
        write('\n\n')
    if template.conditions:
        for k, v in sorted(template.conditions.items()):
            pprint(PythonCall('t.add_condition', k, v))
            write('\n\n')
    if template.parameters:
        for k, v in sorted(template.parameters.items()):
            pprint(PythonCall('t.add_parameter', v))
            write('\n\n')
    if template.add_mapping:
        for k, v in sorted(template.mappings.items()):
            pprint(PythonCall('t.add_mapping', k, v))
            write('\n\n')
    if template.add_resource:
        for k, v in sorted(template.resources.items(), key=lambda (k, v): (_class_name(v), k)):
            pprint(PythonCall('t.add_resource', v))
            write('\n\n')
    if template.add_output:
        for k, v in sorted(template.outputs.items()):
            pprint(PythonCall('t.add_output', v))
            write('\n\n')

    # Trailer
    write('print(t.to_json())\n')


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("filename", help="template to convert")
    args = parser.parse_args()

    d = json.load(open(args.filename))

    template = TemplateGenerator(d)

    pprint(template)
